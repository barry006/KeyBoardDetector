using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Text;
using UnityEngine;

public class KeyboardLayoutDetector : MonoBehaviour
{
    private const int KL_NAMELENGTH = 256; // macOS uses longer layout names

    [DllImport("/System/Library/Frameworks/Carbon.framework/Versions/Current/Carbon")]
    private static extern IntPtr GetKeyboardLayoutInternal();

    [DllImport("/System/Library/Frameworks/Carbon.framework/Versions/Current/Carbon")]
    private static extern void GetIndCLayout([In, Out] IntPtr curKeyboardLayout);

    private Dictionary<string, string> keyboardLayouts = new Dictionary<string, string>
    {
        { "com.apple.keylayout.US", "QWERTY" },        // English - United States
        { "com.apple.keylayout.UK", "QWERTY" },        // English - United Kingdom
        { "com.apple.keylayout.French", "AZERTY" },    // French - France
        { "com.apple.keylayout.CanadianFrench", "AZERTY" }, // Canadian French
        { "com.apple.keylayout.German", "QWERTZ" },    // German - Germany
        { "com.apple.keylayout.Greek", "Greek" },      // Greek
        { "com.apple.keylayout.Hungarian", "Hungarian" }, // Hungarian
        { "com.apple.keylayout.Spanish", "Spanish" },  // Spanish - Spain
        { "com.apple.keylayout.Hebrew", "Hebrew" },    // Hebrew
        { "com.apple.keylayout.Russian", "JCUKEN" },   // Russian - Russia
        { "com.apple.keylayout.Japanese", "Hiragana/Katakana" }, // Japanese - Japan
        { "com.apple.keylayout.Korean", "Hangul" },    // Korean - Korea
        { "com.apple.keylayout.Chinese", "Bopomofo" }, // Chinese (Traditional) - Taiwan
    };

    void Start()
    {
        DetectKeyboardLayout();
    }

    void DetectKeyboardLayout()
    {
        IntPtr curKeyboardLayout = GetKeyboardLayoutInternal();
        if (curKeyboardLayout == IntPtr.Zero)
        {
            Debug.LogError("Failed to retrieve current keyboard layout");
            return;
        }

        GetIndCLayout(curKeyboardLayout);
        StringBuilder name = new StringBuilder(KL_NAMELENGTH);
        GetKeyboardLayoutName(curKeyboardLayout, name);

        string layoutId = name.ToString().Trim();
        Debug.Log("Layout ID: " + layoutId);

        if (keyboardLayouts.TryGetValue(layoutId, out string layoutName))
        {
            Debug.Log("Keyboard detected: " + layoutName);
        }
        else
        {
            Debug.Log("Keyboard layout not recognized");
        }
    }

    void OnGUI()
    {
        IntPtr curKeyboardLayout = GetKeyboardLayoutInternal();
        if (curKeyboardLayout == IntPtr.Zero)
        {
            Debug.LogError("Failed to retrieve current keyboard layout");
            return;
        }

        GetIndCLayout(curKeyboardLayout);
        StringBuilder name = new StringBuilder(KL_NAMELENGTH);
        GetKeyboardLayoutName(curKeyboardLayout, name);

        string layoutId = name.ToString().Trim();

        string layout = keyboardLayouts.ContainsKey(layoutId) ? keyboardLayouts[layoutId] : "Unknown";
        GUI.Label(new Rect(10, 10, 200, 20), "Keyboard: " + layout);
        GUI.Label(new Rect(10, 30, 200, 20), "Keyboard ID: " + layoutId);
    }

    [DllImport("/System/Library/Frameworks/Carbon.framework/Versions/Current/Carbon")]
    private static extern void GetKeyboardLayoutName(IntPtr curKeyboardLayout, StringBuilder pwszKLID);
}
